{
  "openapi": "3.1.0",
  "info": {
    "title": "Sound-data api",
    "description": "A service for working with music",
    "version": "1.0.11"
  },
  "servers": [
    {
      "url": "http://sound-data.local/api/v1"
    }
  ],
  "tags": [
    {
      "name": "Song",
      "description": "Everything about your songs"
    },
    {
      "name": "Playlist",
      "description": "Everything about your playlists"
    },
    {
      "name": "Album",
      "description": "Everything about your albums"
    },
    {
      "name": "Author",
      "description": "Everything about your authors"
    },
    {
      "name": "Genre",
      "description": "Everything about your genres"
    }
  ],
  "paths": {
    "/songs": {
      "get": {
        "tags": ["Song"],
        "summary": "Get all",
        "description": "Returns all songs",
        "operationId": "getAllSongs",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSongs"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/songs/{song_id}": {
      "get": {
        "tags": ["Song"],
        "summary": "Find song by ID",
        "description": "Returns a single song",
        "operationId": "getSongById",
        "parameters": [
          {
            "name": "song_id",
            "in": "path",
            "description": "ID of song to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSong"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Song"],
        "summary": "Update song",
        "description": "This can only be done by the logged in admin",
        "operationId": "updateSong",
        "parameters": [
          {
            "name": "song_id",
            "in": "path",
            "description": "song_id that need to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent song",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatedSong"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSong"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Song"],
        "summary": "Delete song",
        "description": "This can only be done by the logged in admin",
        "operationId": "deleteSong",
        "parameters": [
          {
            "name": "song_id",
            "in": "path",
            "description": "The ID that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseNull"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/songs:search": {
      "post": {
        "tags": ["Song"],
        "summary": "Search by filters",
        "description": "Get all songs by filters",
        "operationId": "searchSongs",
        "requestBody": {
          "description": "Filters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchSongsByFilters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSong"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/song": {
      "post": {
        "tags": ["Song"],
        "summary": "Add a new song",
        "description": "Add a new song",
        "operationId": "addSong",
        "requestBody": {
          "description": "Create a new song",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatedSong"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSong"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/playlists/user/{user_id}": {
      "get": {
        "tags": ["Playlist"],
        "summary": "Find playlist by user",
        "description": "Returns all playlists by user",
        "operationId": "getPlaylistByUser",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "ID of playlist to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsePlaylists"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Playlist"],
        "summary": "Delete song from playlist",
        "description": "Delete song from playlist",
        "operationId": "deletePlaylistByUser",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The ID that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseNull"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/playlist": {
      "post": {
        "tags": ["Playlist"],
        "summary": "Add a new playlist",
        "description": "Add a new playlist",
        "operationId": "addPlaylist",
        "requestBody": {
          "description": "Create a new song",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatedPlaylist"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsePlaylist"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/playlists/{playlist_id}": {
      "get": {
        "tags": ["Playlist"],
        "summary": "Find playlist by id",
        "description": "Returns all playlists by user",
        "operationId": "getPlaylistByPlaylist",
        "parameters": [
          {
            "name": "playlist_id",
            "in": "path",
            "description": "ID of playlist to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsePlaylist"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Playlist"],
        "summary": "Update playlist",
        "description": "This can only be done by the logged in admin",
        "operationId": "updatePlaylist",
        "parameters": [
          {
            "name": "playlist_id",
            "in": "path",
            "description": "playlist_id that need to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent playlist",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatedPlaylist"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsePlaylist"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Playlist"],
        "summary": "Delete playlist",
        "description": "This can only be done by the logged in admin",
        "operationId": "deletePlaylist",
        "parameters": [
          {
            "name": "playlist_id",
            "in": "path",
            "description": "The ID that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseNull"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/playlist/song/{playlist_id}": {
      "post": {
        "tags": ["Playlist"],
        "summary": "Add a song to the playlist",
        "description": "Add a song to the playlist",
        "operationId": "addSongPlaylist",
        "parameters": [
          {
            "name": "playlist_id",
            "in": "path",
            "description": "ID of playlist",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Add a new song",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddedSongPlaylist"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSong"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/playlist/song/{playlist_song_id}": {
      "delete": {
        "tags": ["Playlist"],
        "summary": "Delete song from playlist",
        "description": "Delete song from playlist",
        "operationId": "deleteSongPlaylist",
        "parameters": [
          {
            "name": "playlist_song_id",
            "in": "path",
            "description": "The ID that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseNull"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/albums": {
      "get": {
        "tags": ["Album"],
        "summary": "Get all",
        "description": "Returns all albums",
        "operationId": "getAllAlbums",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseAlbums"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/albums/{album_id}": {
      "get": {
        "tags": ["Album"],
        "summary": "Find album by ID",
        "description": "Returns a single album",
        "operationId": "getAlbumById",
        "parameters": [
          {
            "name": "album_id",
            "in": "path",
            "description": "ID of song to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseAlbum"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Album"],
        "summary": "Update album",
        "description": "This can only be done by the logged in admin",
        "operationId": "updateAlbum",
        "parameters": [
          {
            "name": "album_id",
            "in": "path",
            "description": "album_id that need to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent album",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatedAlbum"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseAlbum"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/album": {
      "post": {
        "tags": ["Album"],
        "summary": "Add a new album",
        "description": "Add a new album",
        "operationId": "addAlbum",
        "requestBody": {
          "description": "Create a new song",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatedAlbum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseAlbum"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/album/song/{album_id}": {
      "post": {
        "tags": ["Album"],
        "summary": "Add a song to the album",
        "description": "Add a song to the album",
        "operationId": "addSongAlbum",
        "parameters": [
          {
            "name": "album_id",
            "in": "path",
            "description": "ID of album",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Add a new song",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddedSongPlaylist"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseSongPlaylist"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/album/song/{song_id}": {
      "delete": {
        "tags": ["Album"],
        "summary": "Delete song from album",
        "description": "This can only be done by the logged in admin",
        "operationId": "deleteSongFromAlbum",
        "parameters": [
          {
            "name": "song_id",
            "in": "path",
            "description": "The ID that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseNull"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/authors": {
      "get": {
        "tags": ["Author"],
        "summary": "Get all",
        "description": "Returns all authors",
        "operationId": "getAllAuthors",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseAuthors"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/author": {
      "post": {
        "tags": ["Author"],
        "summary": "Add a new author",
        "description": "Add a new author",
        "operationId": "addAuthor",
        "requestBody": {
          "description": "Create a new author",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatedAuthor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResponseAuthor"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/authors/{author_id}": {
      "put": {
        "tags": ["Author"],
        "summary": "Update author",
        "description": "This can only be done by the logged in admin",
        "operationId": "updateAuthor",
        "parameters": [
          {
            "name": "author_id",
            "in": "path",
            "description": "author_id that need to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent author",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatedAuthor"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseAuthor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Author"],
        "summary": "Delete author",
        "description": "This can only be done by the logged in admin",
        "operationId": "deleteAuthor",
        "parameters": [
          {
            "name": "author_id",
            "in": "path",
            "description": "The ID that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseNull"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/genres": {
      "get": {
        "tags": ["Genre"],
        "summary": "Get all",
        "description": "Returns all genres",
        "operationId": "getAllGenres",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseGenres"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/genre": {
      "post": {
        "tags": ["Genre"],
        "summary": "Add a new genre",
        "description": "Add a new genre",
        "operationId": "addGenre",
        "requestBody": {
          "description": "Create a new genre",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatedGenre"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseGenre"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/genres/{genre_id}": {
      "put": {
        "tags": ["Genre"],
        "summary": "Update genre",
        "description": "This can only be done by the logged in admin",
        "operationId": "updateGenre",
        "parameters": [
          {
            "name": "genre_id",
            "in": "path",
            "description": "genre_id that need to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent genre",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatedGenre"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseGenre"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Genre"],
        "summary": "Delete author",
        "description": "This can only be done by the logged in admin",
        "operationId": "deleteGenre",
        "parameters": [
          {
            "name": "genre_id",
            "in": "path",
            "description": "The ID that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseNull"
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403"
                }
              }
            }
          },
          "404": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          },
          "500": {
            "description": "Invalid status value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Song": {
        "required": ["id", "author", "genre", "name", "audio"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "album_id": {
            "type": "integer",
            "format": "int64",
            "example": 87362
          },
          "author": {
            "$ref": "#/components/schemas/Author"
          },
          "genre": {
            "$ref": "#/components/schemas/Genre"
          },
          "name": {
            "type": "string",
            "example": "Bismark"
          },
          "audio": {
            "type": "string",
            "format": "url",
            "example": "https://inlnk.ru/yOJAVK"
          },
          "img": {
            "type": "string",
            "format": "url",
            "example": "https://inlnk.ru/MjzLZx"
          }
        }
      },
      "ResponseSong": {
        "type": "object",
        "properties": {
          "data": {
            "required": ["id", "author", "genre", "name", "audio"],
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 10
              },
              "album_id": {
                "type": "integer",
                "format": "int64",
                "example": 87362
              },
              "author": {
                "$ref": "#/components/schemas/Author"
              },
              "genre": {
                "$ref": "#/components/schemas/Genre"
              },
              "name": {
                "type": "string",
                "example": "Bismark"
              },
              "audio": {
                "type": "string",
                "format": "url",
                "example": "https://inlnk.ru/yOJAVK"
              },
              "img": {
                "type": "string",
                "format": "url",
                "example": "https://inlnk.ru/MjzLZx"
              }
            }
          }
        }
      },
      "ResponsePlaylistSong": {
        "type": "object",
        "properties": {
          "data": {
            "required": ["id", "author", "genre", "name", "audio"],
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 10
              },
              "album_id": {
                "type": "integer",
                "format": "int64",
                "example": 87362
              },
              "author": {
                "$ref": "#/components/schemas/Author"
              },
              "genre": {
                "$ref": "#/components/schemas/Genre"
              },
              "name": {
                "type": "string",
                "example": "Bismark"
              },
              "audio": {
                "type": "string",
                "format": "url",
                "example": "https://inlnk.ru/yOJAVK"
              },
              "img": {
                "type": "string",
                "format": "url",
                "example": "https://inlnk.ru/MjzLZx"
              },
              "playlist_song_id": {
                "type": "integer",
                "format": "int64",
                "example": 22
              }
            }
          }
        }
      },
      "ResponseSongPlaylist": {
        "type": "object",
        "properties": {
          "data": {
            "required": [
              "id",
              "author",
              "genre",
              "name",
              "audio",
              "playlist_song_id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 10
              },
              "album_id": {
                "type": "integer",
                "format": "int64",
                "example": 87362
              },
              "author": {
                "$ref": "#/components/schemas/Author"
              },
              "genre": {
                "$ref": "#/components/schemas/Genre"
              },
              "name": {
                "type": "string",
                "example": "Bismark"
              },
              "audio": {
                "type": "string",
                "format": "url",
                "example": "https://inlnk.ru/yOJAVK"
              },
              "img": {
                "type": "string",
                "format": "url",
                "example": "https://inlnk.ru/MjzLZx"
              },
              "playlist_song_id": {
                "type": "integer",
                "format": "int64",
                "example": 10
              }
            }
          }
        }
      },
      "ResponseSongs": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Song"
            }
          }
        }
      },
      "CreatedSong": {
        "required": ["author_id", "genre_id", "name", "audio"],
        "type": "object",
        "properties": {
          "album_id": {
            "type": "integer",
            "format": "int64",
            "example": 87362
          },
          "author_id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "genre_id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "Bismark"
          },
          "audio": {
            "type": "string",
            "format": "url",
            "example": "https://inlnk.ru/yOJAVK"
          },
          "img": {
            "type": "string",
            "format": "url",
            "example": "https://inlnk.ru/MjzLZx"
          }
        }
      },
      "UpdatedSong": {
        "type": "object",
        "properties": {
          "album_id": {
            "type": "integer",
            "format": "int64",
            "example": 87362
          },
          "author_id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "genre_id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "Bismark"
          },
          "img": {
            "type": "string",
            "format": "url",
            "example": "https://inlnk.ru/MjzLZx"
          }
        }
      },
      "SearchSongsByFilters": {
        "type": "object",
        "properties": {
          "author_id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "genre_id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          }
        }
      },
      "Album": {
        "required": ["id", "name", "songs"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "Star"
          },
          "img": {
            "type": "string",
            "format": "url",
            "example": "https://inlnk.ru/MjzLZx"
          },
          "songs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Song"
            }
          }
        }
      },
      "ResponseAlbums": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Album"
            }
          }
        }
      },
      "ResponseAlbum": {
        "type": "object",
        "properties": {
          "data": {
            "required": ["id", "name", "songs"],
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 10
              },
              "name": {
                "type": "string",
                "example": "Star"
              },
              "img": {
                "type": "string",
                "format": "url",
                "example": "https://inlnk.ru/MjzLZx"
              },
              "songs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Song"
                }
              }
            }
          }
        }
      },
      "CreatedAlbum": {
        "required": ["name", "songs"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Star"
          },
          "img": {
            "type": "string",
            "format": "url",
            "example": "https://inlnk.ru/MjzLZx"
          },
          "songs_id": {
            "type": "array",
            "example": [10],
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "UpdatedAlbum": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Star"
          },
          "img": {
            "type": "string",
            "format": "url",
            "example": "https://inlnk.ru/MjzLZx"
          }
        }
      },
      "Playlist": {
        "required": ["id", "user_id", "name", "songs"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "example": 13472
          },
          "name": {
            "type": "string",
            "example": "Chill"
          },
          "songs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponsePlaylistSong"
            }
          },
          "img": {
            "type": "string",
            "format": "url",
            "example": "https://inlnk.ru/MjzLZx"
          }
        }
      },
      "ResponsePlaylists": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Playlist"
            }
          }
        }
      },
      "ResponsePlaylist": {
        "type": "object",
        "properties": {
          "data": {
            "required": ["id", "user_id", "name", "songs"],
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 10
              },
              "user_id": {
                "type": "integer",
                "format": "int64",
                "example": 13472
              },
              "name": {
                "type": "string",
                "example": "Chill"
              },
              "songs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResponsePlaylistSong"
                }
              },
              "img": {
                "type": "string",
                "format": "url",
                "example": "https://inlnk.ru/MjzLZx"
              }
            }
          }
        }
      },
      "CreatedPlaylist": {
        "required": ["user_id", "name", "songs_id"],
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer",
            "format": "int64",
            "example": 13472
          },
          "name": {
            "type": "string",
            "example": "Chill"
          },
          "songs": {
            "type": "array",
            "example": [10],
            "items": {
              "type": "integer"
            }
          },
          "img": {
            "type": "string",
            "format": "url",
            "example": "https://inlnk.ru/MjzLZx"
          }
        }
      },
      "UpdatedPlaylist": {
        "type": "object",
        "properties": {
          "data": {
            "required": ["name", "songs"],
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Chill"
              },
              "img": {
                "type": "string",
                "format": "url",
                "example": "https://inlnk.ru/MjzLZx"
              }
            }
          }
        }
      },
      "AddedSongPlaylist": {
        "required": ["song_id"],
        "type": "object",
        "properties": {
          "song_id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          }
        }
      },
      "Author": {
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "Savin Denis"
          }
        }
      },
      "ResponseAuthors": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Author"
            }
          }
        }
      },
      "ResponseAuthor": {
        "type": "object",
        "properties": {
          "data": {
            "required": ["id", "name"],
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 10
              },
              "name": {
                "type": "string",
                "example": "Savin Denis"
              }
            }
          }
        }
      },
      "CreatedAuthor": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Savin Denis"
          }
        }
      },
      "Genre": {
        "required": ["id", "name"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "pop"
          }
        }
      },
      "ResponseGenres": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Genre"
            }
          }
        }
      },
      "ResponseGenre": {
        "type": "object",
        "properties": {
          "data": {
            "required": ["id", "name"],
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 10
              },
              "name": {
                "type": "string",
                "example": "pop"
              }
            }
          }
        }
      },
      "CreatedGenre": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "pop"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["code", "message"],
        "properties": {
          "code": {
            "type": "string",
            "description": "Error status code",
            "enum": ["400", "401", "403", "404", "500"]
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "error discription"
          },
          "meta": {
            "type": "object",
            "description": "Meta data for the error",
            "properties": {
              "additionalInfo": {
                "type": "string",
                "description": "Additional information about the error"
              }
            }
          }
        }
      },
      "Error400": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "example": {
          "errors": [
            {
              "code": "400",
              "message": "Bad Request",
              "meta": {
                "additional_info": "Additional information about the error"
              }
            }
          ]
        }
      },
      "Error401": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "example": {
          "errors": [
            {
              "code": "401",
              "message": "Unauthorized",
              "meta": {
                "additional_info": "Additional information about the error"
              }
            }
          ]
        }
      },
      "Error403": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "example": {
          "errors": [
            {
              "code": "403",
              "message": "Forbidden",
              "meta": {
                "additional_info": "Additional information about the error"
              }
            }
          ]
        }
      },
      "Error404": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "example": {
          "errors": [
            {
              "code": "404",
              "message": "Not Found",
              "meta": {
                "additional_info": "Additional information about the error"
              }
            }
          ]
        }
      },
      "Error500": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "example": {
          "errors": [
            {
              "code": "500",
              "message": "Internal Server Error",
              "meta": {
                "additional_info": "Additional information about the error"
              }
            }
          ]
        }
      },
      "ResponseNull": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object"
          }
        }
      }
    }
  }
}
